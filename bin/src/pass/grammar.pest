s = _{ " " }
nl = _{ NEWLINE | " " | "\t" }
ws = _{ s | nl }
keyword = { "match" | "with" | "import" | "end" | "Fin" | "fin" | "fn" | "unit" | "Unit" | "Type" | "module" | "record" | "where" }
name = { !keyword ~ ( ASCII_ALPHANUMERIC | "_" )+ }
full_name = { ( name ~ "." )+ ~ name }
num = { ASCII_DIGIT+ }

module = { "module" ~ ws+ ~ item_list ~ ws+ ~ "end" }
item_list = { item ~ ((";" | NEWLINE) ~ ws* ~ item )* ~ ws* }
item = _{ ws* ~ ( record_def | module_def | term_def | dec ) ~ s* }
    term_def = { name ~ ws* ~ "=" ~ ws* ~ term }
    record_def = { name ~ ws* ~ "=" ~ ws* ~ "record" ~ s+ ~ param_list ~ s* ~ "where" ~ ws* ~ field_list ~ ws* ~ "end" }
        field_list = { (field ~ (ws* ~ field)*)? }
        field = { name ~ ws* ~ ":" ~ ws* ~ term ~ s* ~ ("," | NEWLINE) }
    module_def = { name ~ ws* ~ "=" ~ ws* ~ module }
    dec = { name ~ ws* ~ ":" ~ ws* ~ term }
    
param_list = { (name ~ ( s+ ~ name )*)? }

term = _{ prec2 }
prec2 = _{ fun_elim | prec1 }
    fun_elim = { prec1 ~ ws* ~ "(" ~ ws* ~ prec2 ~ ws* ~ ("," ~ ws* ~ prec2)* ~ ws* ~ ")" }
prec1 = _{ ann | fun_type | prec0 }
    ann = { prec0 ~ s* ~ ":" ~ s* ~ prec1 }
    fun_type = { dependent | simple }
        dependent = { "[" ~ s* ~ name ~ s* ~ ":" ~ s* ~ prec1 ~ s* ~ "]" ~ ws* ~ "->" ~ ws* ~ prec1 }
        simple = { prec0 ~ ws* ~ "->" ~ ws* ~ prec1}
prec0 = _{ fun | type_type | var | fin | fin_type | import | record_val | match_expr
         | "(" ~ s* ~ term ~ s* ~ ")" }
    fun = { "fn" ~ s+ ~ param_list ~ s*  ~ "=>" ~ ws* ~ term }
    type_type = { "Type" }
    var = { name }
    fin = { "fin" ~ s+ ~ num }
    fin_type = { "Fin" ~ s+ ~ num }
    import = { "import" ~ ws* ~ full_name }
    record_val = { "record" ~ ws* ~ "[" ~ ws* ~ field_vals_list? ~ ws* ~ "]" }
    field_vals_list = _{ field_val ~ ( "," ~ ws* ~ field_val )* }
        field_val = { name ~ ws* ~ "=" ~ ws* ~ term }
    match_expr = { "match" ~ ws+ ~ term ~ ws+ ~ "with" ~ ws* ~ clause_list? ~ ws* ~ "end" }
        clause_list = _{ ( clause ~ ( ("," | NEWLINE) ~ ws* ~ clause)* )? }
            clause = { pattern ~ ws+ ~ "=>" ~ ws+ ~ term }
        pattern = _{ record_pattern
                   | fin_pattern
                   | binding_pattern }
            record_pattern = { "[" ~ ws* ~ pattern ~ ( ( ws* ~ "," ~ ws* ~ pattern )* )? ~ ws* ~ "]" }
            fin_pattern = { "fin" ~ ws+ ~ num }
            binding_pattern = { name }
toplevel = _{ SOI ~ item_list ~ EOI }