ws = _{ " " | "\n" | "\r" | "\t" }

ann = { "ann" ~ term ~ ws ~ term }

type = { pi | sigma | enum_type | universe | multiplicity_type | stage_type | captures_list_type }
pi = { "Pi" ~ ws ~ term ~ ws ~ term ~ ws ~ term }
sigma = { "Sigma" ~ ws ~ term ~ ws ~ term }
enum_type = { "Enum" ~ ws ~ ASCII_DIGIT+ }
multiplicity_type = { "Multiplicity" }
stage_type = { "Stage" }
captures_list_type = { "CapturesList" }

function = { "function" ~ ws ~ term }

apply = { "apply" ~ ws ~ term ~ ws ~ term }

pair = { "pair" ~ ws ~ term ~ ws ~ term }

split = { "split" ~ ws ~ term ~ ws ~ term }

constant = { "constant" ~ ws ~ ASCII_DIGIT+ }

case = { "case" ~ ws ~ term ~ ( ws ~ term )* }

var = { "var" ~ ws ~ ASCII_DIGIT+ }

multiplicity = { "multiplicity" ~ ( "unique" | "shared" ) }

stage = { "stage" ~ ASCII_DIGIT+ }

captures_list = { nil | cons }
nil = { "nil" }
cons = { "cons" ~ ws ~ term ~ ws ~ term }

term = { "(" ~ ws? ~ ( ann | type | function | apply | pair | split | constant | case | var | multiplicity | stage | captures_list ) ~ ws? ~ ")" }