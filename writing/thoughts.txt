dependent records
the type of a record's field can depend on the value of another field
assume to fields A and B, B is dependent on A
you would need to establish A's value in order to establish the value of B
example: Maybe type

Maybe t = [tag: {s n} data: case tag | s -> t | n -> {none}]

more technically speaking, the type of a field can be any expression, said expression's context is filled with the enclosing record's fields

    record : Record[fields] field in record
-----------------------------------------------
    field : fields |- e

could records and record types be condensed to one thing? if so, what would be gained
I mean, instead of having
data Term = Record ...
          | RecordType ...

and doing Record[foo = 3 bar = 14]:RecordType[foo : Int bar : Int]
you could do Record[foo = 3 bar = 14]:Record[foo = Int bar = Int]s

might want to remove lambdas being able to access variables defined outside of them
such as this:
lam x . (lam y . x)

dvdt: dependent function
nvdt: dependent pair
dvnt: normal function
nvnt: normal pair

apply
match on argument to see what return type is
result of application is bound to a variable

addOne n = n + 1

apply x = addOne 1
    | 0 -> True
    | 1 -> False
    | n -> Kinda

split
match on fst to see what snd's type is
snd is bound to a variable

one_and_two = [1 2]

split one_and_two snd
    | n -> snd -- snd is going to have type Nat

default : [b : Bool] -> if b then Nat else List ()
default =
    case b of
        True -> 0
        False -> []

(\v -> v0) 0
beta reducing the body of that lambda with fill in v0
everything which binds names must also do beta reduction, this includes case exprs, functions, split exprs, etc

case v0 = ('foo : {foo bar})
| 'bar -> ('bat : case v1 = v0 | 'bar -> {bat} | 'foo -> {baz})
| 'foo -> ('baz : case v1 = v0 | 'bar -> {bat} | 'foo -> {baz})
: case v1 = v0 | 'bar -> {bat} | 'foo -> {baz}



universes
    Pi-0:
        sort of pi types where the bound variable is used 0 times
        in other words, the sort of non-dependent function types
        Pi-0 is inhabited by 0-use, 1-use, and w-use function types
        example inhabitants:
            (0 v : Int) -> Int
            (1 v : Int) -> Int
            (w v : Int) -> Int
        a 0-use inhabitant of the Pi-0 universe is essentially useless, as the variable cannot be used in the type or term spaces
    Pi-1:
        same as Pi0, except bound variable must be used exactly once
    Pi-w:
        same as Pi0, except bound variable may be used any amount of times
    Enum:
        the universe of all enum types, enum types are finite sets
        an enum type is denoted {n}, where n is the amount of elements in the set
        for instance, the elements of {2} are 1 and 11
        {0} has no elements
        {1} has one element
    Sort-n:
        universe hierarchy
        Sort-0 contains Pi-0, Pi-1, Pi-w, and Enum
        Sort-1 contains Sort-0 and all the elements of Sort-0
        Sort-2 contains Sort-1 and all the elements of Sort-1
        etc

aside: pi types
    the various pi universes are actually different at each sort
    given a sort S and a pi type (x : A) -> B, A can be any type down the tree from S, not including S itself, the same is true for B

{0 U : Universe 0} -> {0 T : U} -> 1 T -> T
id _ _ x = x

if we add universe polymorphism, we can quantify over all universes:

{0 l : Level} -> {0 U : Universe l} -> {0 T : U} -> 1 T -> T
id _ _ _ x = x

hopefully the verbosity can be alleviated with syntax sugar



f x =
    case d = x of
    | 1 -> 'foo : {foo}
    | 2 -> 'bar : {bar}
    : case d of | 1 -> {foo} | 2 -> {bar}
: (x : {1 2}) -> case x of | 1 -> {foo} | 2 -> {bar}

in typechecking case, it will send info up that says x = d
then, when checking if the case type and function type are equal, that rewrite will be performed

x : A , y : B

__________________________________________________
boxing this off because this is very interesting

    dependent
    x    y    A    B
c x x(x) x(y) x(A) x(B)
o y y(x) y(y) y(A) y(B)
n A A(x) A(y) A(A) A(B)
c B B(x) B(y) B(A) B(B)

interesting visualization of dependent types
im going to presume a term cannot depend on itself, elimating all the 'e(e)' terms

heres some inference rules

x : A  y(x) : B(x)
------------------
[x y(x)] : A , B(x)

that would be a function, the body of a function, y in this case, cannot be known without knowing x, hence it is 'dependent' on x
the same is true for B

applying a function would correspond to this rule

[x y(x)] : A , B(x)
-------------------
y : B

note that you can trivially get x, since it is known

[x y(x)] : A , B(x)
-------------------
x : A

as another example, heres mutually dependent pairs

x : A(y)  y : B(x)
------------------
[x y] : A(y) , B(x)

again, you can always trivially get x or y, since their values are known

[x y] : A(y) , B(x)
-------------------
x : A


[x y] : A(y) , B(x)
-------------------
y : B

just though this was interesting, might help with writing the typechecker once I rewrite the codebase
___________________________________________________

data Nested a = Cons a (Nested [a]) | Nil

nested :: Nested Int
nested = 1 Cons [2,3,4] Cons [[5,6],[7],[8,9]] Cons Epsilon

length :: Nested a -> Int
length Nil         = 0
length (Cons x xs) = 1 + length xs

length nested

monomorphization

length_Int :: Nested Int -> Int
looks at body, sees recursive call of length on Nested [Int]
length_List_Int :: Nested [Int] -> Int
then looks at body of length xs
length_List_List_Int :: Nested [[Int]] -> Int
infinite expansion

uniform representation

data Nested a = Cons a (Ptr $ Nested [a]) | Nil

length :: Ptr (Nested a) -> Int
length (Ref Nil)         = 0
length (Ref (Cons x xs)) = 1 + length xs

Int length_Nested_Int(*Unit d) {
    casted = cast[Nested_Int](d) -- repr of Nested_Int is (Int, *Unit)
    return 1 + length_Nested_Int(casted.1)
}

Ptr are always compiled to untyped pointers

length :: mono {A : Type} -> Ptr (Nested A) -> Int
length (Ref Nil)         = 0
length (Ref (Cons x xs)) = 1 + length xs

length {Int} nested



removing free variables might be beneficial
could still support currying through syntactic sugar
multiparameter functions can be modeled as a function taking a record
would also remove the need to have special type system support for free variables
example, type of add, (angle brackets denote free variables in a function):

add : Int -> <Int> Int -> Int

add takes an Int and returns a function which has captured an Int, takes an Int, and returns an Int
this capturing function could be modeled in the current language, instead of being an add-on (assume + is a primitive):

add : Int -> [Int, [Int, Int] -> Int]
add = lam x . [x, lam [freevar, y] . (freevar + y)]

using this function to add 2 and 2 (using .0 and .1 for ordered field access):

let
    add2 = add 2
in
    add2.1 [add2.0, 2]

so which approach is better? adding type system support for freevars, or removing freevars and using the current system to implement them?



stages
`Type s` where `s : Stage`

given a term `x` of stage `n` and a term `y` of stage `m` where `y` is a subterm of `x`, such is valid if `n in m`
```
0 in 0 = True
1 in 1 = True
0 in 0..1 = True
1 in 0..1 = True
_ = False
```

`0..1` is the default in the examples

extern functions:
```
extern alloc : ([A : Type] -> Ptr A) : Type 0 -- only usable during runtime

main : Ptr Int : Type 0
main = alloc Int -- valid, main's stage (0) in alloc's stage (0)

bad_main : Ptr Int : Type 1
bad_main = alloc Int -- invalid bad_main's stage (1) notin alloc's stage (0)

bad_main2 : Ptr Int : Type 0..1
bad_main2 = alloc Int -- still invalid, bad_main2's stage (0..1) notin alloc's stage (0)
```

last example doesn't work because bad_main2 *could* be called at compile time, since its stage is `0..1`
here's some examples with `Size`s, assume that `Type` not take an extra parameter for its size:
```
-- Size is of stage 1, they only exist during compilation and are always monomorphized away
-- something cannot be size polymorphic during runtime, as you can with types

map : [sa sb : Size] -> [A : Type 1 sa] -> [B : Type 1 sb] -> (A -> B) -> List A -> List B
map _ _ _ _ f xs =
    let
        map_inner : (A -> B) -> List A -> List B
        map_inner f (x::xs) = f x :: map_inner f xs
        map_inner _ [] = []
    in
        map_inner f xs

-- map is only executable at compile time, it returns a function, map_inner, which is usable at run time or compile time
-- this way, the inner map is able to be monomorphized
-- map cannot call itself recursively because it is of stage 1 while map_inner is of stage 0..1, that is why it has to return map_inner
-- this way, monomorphization semantics are visible in the type system
-- the typical definition of map does not typecheck:

map : [sa sb : Size] -> [A : Type 1 sa] -> [B : Type 1 sb] -> (A -> B) -> List A -> List B
map sa sb A B f (x::xs) = f x :: map sa sb A B f xs
map _ _ _ _ _ [] = []

-- this would fail with an error like 'anonymous function returned by map of stage 0..1 calls map of stage 1, 0..1 notin 1'
```

checking pairs:
    fst:
        inc context by 2
        insert snd type as 1
        check fst
    snd:
        inc context by 2
        insert fst type as 0
        check snd
checking case branch:
    if normal discrim is a var, normalize context with branch val as var


"""
user Today at 7:42 PM
iirc the distinction is that you can "make something linear" and "forget that something is unique", i.e. you can write a -> Linear a and Unique a -> a, but not vice versa
and while a function Linear a -> b must use its argument once, a function Unique a -> b gets the guarnatee that its unique but can use it multiple times
so ownership in rust is more like affine values that happen to be unique because they were cretaed at a unique point in time (e.g. by Box::new)

brendanzab Today at 7:45 PM
ahh, I'm not sure how one could forget the uniqueness of something in Rust if it had it :confounded:
trying to apply this stuff to Rust always makes my brain hurt
need to read Oxide more closely at some point so I actually understand it better
"""

"high performance at high abstraction"


UniqueType
NormalType

1. terms of UniqueType and all other terms can be used once
2. terms of NormalType are unrestricted

first rule is so uniqueness still works with polymorphism,
	if the rule "terms of NormalType and all other terms are unrestricted", this erroneous program
	would be valid:

dupe : (d : {u n}) -> (A : case d | u -> UniqueType | n -> NormalType) -> A -> Pair A A
dupe _ _ _ x = pair x x

dupe 'u Int 0 = pair 0 0

that would duplicate the unique value 0
because of that, when the kind is unknown, we must assume a usage of 1



f : *Int -> Pair *Int *Int
f x = pair x x

let u : *Int = 0
in f u

// simply typed `if`
if_helper : Bool -> A -> A -> A
if_helper t b1 b2 =
    match t
    | true -> b1
    | false -> b2

// better `if`
if : (t : Bool) -> (A : Type (if_helper t 1 0)) -> (B : Type (if_helper t 0 1)) -> A -> B -> if_helper t A B
if =
    lam t .
        match t
        | true -> lam A B x y . x
        | false -> lam A B x y . y

let u : *Int = 0
in
    if (0 == 0) u u

could add a `Zero` usage, to complement `Unique` and `Shared`, might rename `Unique` to `One` and `Shared` to `Many`, just for the sake of consistancy (also to get in line with QTT)

f : (t : Bool) -> (match t | true => Unused Int | false => Unique Int) -> Int
f t =
    match t
    | true => 42
    | false => lam x . x

f true (2 : Unique Int) -- invalid
f false (2 : Unique Int) -- valid

now how can i make something like this work with `if`?

let u : Unique Int
in if (0 == 0) u u

it appears to the typecheck that `u` is used twice, but we know that since only one branch will be used, only one of the `u`s will be used, how do we convey that to the typechecker?



captureslist
context for a function to run in
`+` : Int -> [Int] Int -> Int

if :
    (t : Bool) ->
    (Ctx : ContextType : Type 1) ->
    (ctx : Cs) ->
    (A : Type n) ->
    (B : Type m) ->
    ((Ctx Unit -> A) (match t | true => 1 | false => 0)) ->
    ((Ctx Unit -> B) (match t | true => 0 | false => 1)) ->
    match t | true -> A | false -> B
if =
    lam t.
        match t
        | true => lam _ _ x y . x unit cs
        | false => lam _ _ x y . y unit cs

let u : Int : Type 1 = 42
in if (0 == 0) Int Int [Int : Type 1] [u] (lam cu _ . cu) (lam cu _ . cu)

better version:

if : [
    (t : Bool),
    (Ctx : ContextType 1),
    (ctx : Ctx),
    ((Unit::Ctx -> A) : Type (match t | true => 1 | false => 0)),
    ((Unit::Ctx -> A) : Type (match t | true => 0 | false => 1)),
    ] -> A
if =
    fn . t _ ctx b1 b2 ->
        match t
        | true -> b1 unit::ctx
        | false -> b2 unit::ctx

let u : Int : Type 1 = 42
in if (0 == 0) [Int : Type 1] [u] (fn u . u) (fn u . u) -- no seperate syntax for `ContextType`s and contexts, should change this



"unsafe = postulate"


no closures, so how is `id` implemented?

id : (A : Type) -> A -> A
id A x = x

id Unit unit

id' : (A : Type) -> 
id' = lam A . pair A (lam [A, x] . x : A)

let (A, f) = id Unit
in f (pair A unit)



data CapturesList : (l : Level) -> Universe (succ l) where
    cons : Universe l -> CapturesList l -> CapturesList l
    nil : CapturesList l



should fix `Context` to store both defs and decs

just finished fixing contexts and type normalization, now i'm short of work until i figure out how to write the frontend


finally figured out what was wrong in my thinking. I was thinking that the process would go surface to core, find errors, then *somehow* *de*laborate the errors to be on the surface-level again. how it's actually supposed to be is that surface and core are seperate passes, core is not center of it all



two ways to maintain referential transparency:
    thread a world value
    hide the impure data

i should make core language explicitly typed



merging `Error` and `InnerError` into one type in `surface`, i should get around to doing this in core too. the reason is that not all errors might need to record the state or even what term caused the error, it's for the sake of being more flexible



------------------------------------------------
clamn is a *functional systems language*

goals as a *functional* language:
- making the type system ergonomic and expressive
- enabling high abstraction

goals as a *systems language*:
- increasing the ease of writing performant code
- enabling high optimization

goals as a *functional systems language*:
- abstractions should be zero cost, and when they aren't, the cost should be clear and knowable by the programmer
- the type system should not just express properties useful for verification, but also properties useful for performance
------------------------------------------------

fn =>
    split v0 =>
        case v1
            l => a : A
            r =>
                split v0 =>
                    case v1
                        l => b : B
                        r => c : C
                    :
                        case v1
                            l => B : Type
                            r => C : Type
                :
                    split v0 =>
                        case v1
                            l => B : Type
                            r => C : Type
        :
            case v1
                l => A
                r =>
                    split v0 =>
                        case v1
                            l => B : Type
                            r => C : Type
    :
        split v0 =>
            case v1
                l => A
                r =>
                    split v0 =>
                        case v1
                            l => B : Type
                            r => C : Type
: Discrim ->
    split v0 =>
            case v1
                l => A
                r =>
                    split v0 =>
                        case v1
                            l => B : Type
                            r => C : Type

ctx extended w/ p |- e : t[p/x]
----------------------------------------
ctx |- (match x with p => e | ..) : t

split v0
    case v0
        l => unit
        r => unit
: split v0
    case v0
        l => Unit
        r => Unit


effects in types
suppose e : io t
type ann expects t, not io t
how do we deal with effects in types?
allocation is explicit and an effect


containers polymorphic over pointer types

data List : (A : Type) -> (Ptr : Type -> Type) -> Type where
    nil : List A Ptr
    cons : Ptr A -> List A Ptr -> List A Ptr


put evaluation time on the kind
Type static
Type dynamic
inferred default could be static?
termination checking checks statics and dynamics separately

def; globals_map_index; actual
3 entries
a : 1, 3
b : 3, 5
c : 5, 5
2 entries
a : 1, 3
b : 3, 3
1 entry
a : 1, 1


check type_anns in is_terms_eq as well


treat stage exclusivity as an effect
Type stage is_exclusive


issue is that some declarations need the definitions
so I can't naively do it by just doing all the declarations first and then the definitions
would form a graph I assume
items cannot have mutually recursive declarations
definitions can be mutually recursive if the declarations are not?

state now stores global declarations as well as definitions

f : import Main.a;
f = fin 0;
a : Type 0;
a = Fin 1;

why does this sucessfully typecheck? it shouldn't I don't believe
I suspect it's my use of Anything and Unit
will have to investigate this tomorrow
in other thought: I'm seriously going to need a rewrite eventually
aha, looking at it again, it seems to be Anything causing the problem. core_map is initialized to an Anything-typed unit, it needs to be the first global instead
how am I going to do unknown values? need some way to indicate to the evaluator not to normalize a term?


TODO: change all BTree collections to assoc lists, ordering causes problems


module {
    a : Type 0;
    b : Type 0;
    f : [ x : import Main.a ] -> import Main.a;
    f = fn x => x;
}

TODO: replace usages of Anything with Postulate
TODO: make num_global_decs in surface_to_core redundant by populating the list of global types with postulates in elab_toplevel

I should remove `Anything`
done

Now that I've got all the current features implemented properly, I want to do some refactoring
Let's see, I think unification could be reimplemented, my implementation works, but I'll see how it's done elsewhere
Redoing my organizational structure would be nice too, I feel that surface_to_core could have some of the stuff in it moved to other modules
Oh right, I'm going to have to implement unification in the surface language anyway

What if I put representation annotations on the arrow instead of the kind?
Alright, let's say erasure was added as well, and representations are required to be erased


What if uniqueness was put on the arrow?
`{unique x : A} -> B`
Would this increase ergonomics? What's to gain?
Composability perhaps. No need to have a datatype for each usage. Or would there still be?


([x : _ : Type dynamic] -> _ : Type dynamic) : Type static
Can we not have this with relative staging?
([s : Stage] -> ([x : _ : Type s] -> _ : Type s) : Type succ(s)) : Type ?
Hm, actually how would we do stage polymorphism in the first one?
Seems the system will need to be ironed out


Should should types have their kinds be indexed by the type's representation, or should the type *be* the representation?

Aha, instead of requiring that all `Rep`s be inlined, have the *arrow* require that the rep of its in and out types be inlined
This way we can have values where the representation is not known at run time as well as meeting the restriction that functions need to know the representation of their argument statically
Hm, does that extend to the representation of a function's result? Record fields? I hadn't thought about that before. Interesting

`Type stage must_inline rep`

Pi types must have their argument and result have a statically known representation
```
ctx |- r_A : Rep : Type static true reprep
ctx |- r_B : Rep : Type static true reprep
ctx |- A : Type _ _ r_A
ctx, x : A |- B : Type _ _ r_B
------------------------------------------
[ x : A ] -> B : Type _ _ fnrep
```

Reps do not have the must_inline and stage restrictions I initially thoguht they would need
```
---------------------
Rep : Type _ _ reprep
```


Wow, the typechecker is *incredibly* slow right now
```
module {
    a : Fin 1;
    a = fin 0;
    b : Fin 1;
    b = fin 0;
    c : Fin 1;
    c = fin 0;
    d : Fin 1;
    d = fin 0;
    e : Fin 1;
    e = fin 0;
    g : [ x : Fin 1 ] -> Fin 1;
    g = fn x => x;
}
```
This takes around 45 seconds to typecheck
This will have to take priority over adding records, hm
Well I suppose I've been wanting to look into this for a while


Performance problems are not due to:
* Calls to `check_usage`
* Call to `get_free_vars`

Perhaps it's just due to a huge amount of recursive calls to `check`
Yep, that's it. The problem seems to be with exponential term blowup

Seems I need inference for core terms
Nope, I actually need to increase sharing


I should make a little write-up teaching the differences between linear and uniqueness types
Teaching substructural type systems
Ordered type systems look super interesting, seems like a generalized version of Rust's lifetimes, definitely going to use something like them

I need to make some code samples for Clamn too, to make it more understandable

```
map : (s1, s2, s3, s4 : Stage) -> (a1, a2 : Availability) -> (A : Type s1 a1) -> (B : Type s2 a2) -> _
map s1 s2 s3 s4 a1 a2 A B =
    let
        ListOfA :
            match a1 with
                Exclusive => Type s1 a1
                Unrestricted => Type s3 a1
        ListOfA = List A
        ListOfB :
            match a1 with
                Exclusive => Type s2 a2
                Unrestricted => Type s4 a2
        ListOfB = List B
        map_inner : (A -> B) -> ListOfA -> ListOfB
        map_inner f list =
            match list with
                Cons data rest => Cons (f data) (map_inner f rest)
                Nil => Nil
    in
        map_inner
```